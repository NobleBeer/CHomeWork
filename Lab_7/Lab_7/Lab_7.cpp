// Lab_7.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//


/*
Функция вычисления целой степени X^N
*/

double Power(double x /* аргумент */, int n /* степень */)
{
	bool divide = false; // Признак знака степени
	double result = 1.0; // Результат вычислений
	if (n < 0) // Если степень отрицательна
	{
		divide = true; // Запомнить знак
		n = -n; // Сделать положительной
	}
	// Умножать n-раз на аргумент
	for (int k = 1; k <= n; k++)
		result *= x;
	// Вернуть результат, если степень положительна, или вернуть
	// единицу делить на результат, если степень отрицательна
	return ((divide) ? (1 / result) : result);
}



/*
Функция округления значения до знака по правилам математики
*/

double Round(double value /* аргумент */, int digit /* номер знака */)
{
	// Вычислить коэффициент для сдвига разрядов
	double factor = Power(10, ((digit > 0) ? digit : 0));
	// Произвести округление по правилам математики
	double result = (int(value * factor + 0.5) / factor);
	// Вернуть округленное значение
	return result;
}
/*
Функция вычисления факториала N!
*/

double Factorial(int n /* (N)! */)
{
	// Результат вычислений (значение факториала)
	double result = 1.0;
	// Факториал 0!=1, 1!=1, поэтому начинать от 2!
	if (n > 0)
		// Умножать (n-1)-раз на счётчик
		for (int k = 1; k <= n; k++)
		{
			result *= k;
		}
	// Вернуть результат
	return result;
}

/*
Функция вычисления абсолютного значения |X|
*/

double Abs(double x /* аргумент */)
{
	return ((x < 0) ? -x : x);
}



/*
Функция вычисления ln(x+1) до заданного знака
*/

double Func(double x /* аргумент */, int digit /* номер знака */)
{
	int n = 0; // Счётчик итераций (номер элемента)
	double term = 1.0; // Элемент ряда на текущем шаге
	double func = term; // Значение функции (результат)
	double eps = Power(10, -digit); // Погрешность
	int z = -1;
	// Вычисление значения по ряду Тейлора		
		do {			
			
			// Вычислить следующий элемент ряда			
			term =(1* z * Factorial(n-1) / Factorial(n)) * Power(x,n);
			z *= -1;
			//term = Power(x, n * 2) / Factorial(n * 2);
			// Прибавить значение элемента к значению функции
			func += term;
			// Увеличить счётчик итераций 
			n++;			
			// Проверить погрешность
		} while (Abs(term) > eps);
		// Вернуть результат
		return func;
}

#include <stdio.h> // библиотека ввода-вывода
#include <locale.h> // библиотека языковой локализации

#pragma warning(disable: 4996)

/*
Главная функция. Реализует ввод, проверку, интерфейс с пользователем.
*/

void main()
{
	int digit; // Номер знака после точки для округления
	int check; // Статус проверки правильности
	double arg; // Аргумент функции
	double result; // Результат функции
	// Описание внешних функций, находящихся в другом модуле
	double Func(double /* аргумент */, int /* номер знака */);
	double Round(double /* аргумент */, int /* номер знака */);
	// Для сообщений на русском языке
	setlocale(LC_ALL, "Russian");
	printf("Лаба: Степенные ряды");

	// Цикл ввода данных и вычисления результатов
	do {
		// Ввод аргумента
		printf("\nВведите значение аргумента:>");
		
		check = scanf("%lf", &arg);
		// Проверка корректности ввода аргумента
		if ((check != 1) || fgetchar() != 10 || arg <= -1 || arg > 1)
			printf("\n - некорректное значение");
		else
		{
			
			// Ввод точности (номер знака после десятичной точки)
			printf("\nВведите номер знака после точки [1..8]:>");
			check = scanf("%d", &digit);
			// Проверка корректности ввода точности
			if (check != 1 || fgetchar() != 10 || digit < 1 || digit > 8)
				printf("\n - некорректное значение");
			else
			{
				// Вычислить значение функции и вывести результат
				//arg ++;
				result = Func(arg, digit);
				printf("\nFunc(1+x(%lg))=%lg <%lg>", Round(arg, digit), Round(result, digit), result);
				
			}
			
		}
		// Сбросить поток ввода
		fflush(stdin);
		// Подтверждение ввода нового аргумента
		printf("\nНажмите [enter] для повторения ввода");
	}
	while (fgetchar() == 10);
}
// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
