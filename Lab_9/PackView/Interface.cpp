#include "..\PackBits\Global.h" // библиотека работы с упакованным числом
#include <stdio.h> // библиотека ввода-вывода
#include <locale.h> // библиотека языковой локализации


#pragma warning(disable: 4996)

/*

Главная функция. Реализует ввод, проверку, интерфейс с пользователем.

*/

void main()

{

	int ch = '\0'; // Пункт меню

	int check; // Статус проверки

	int speed; // Компонента скорости

	int level; // Компонента уровня

	bool direct; // Компонента направления

	STATUS data = 0; // Упакованное число

	// Для сообщений на русском языке

	setlocale(LC_ALL, "Russian");

	printf("Лаба: Упаковка данных");

	do { // Цикл обработки команд

		switch (ch)

		{

		case 'G': // Подменю для получения данных

		case 'g':

			do {

				// Отобразить подменю

				printf("\n\nПодменю <Извлечение данных>:");

				printf("\n1. Извлечь значение скорости");

				printf("\n2. Извлечь значение уровня");

				printf("\n3. Извлечь статус направления");

				printf("\n0. Вернуться в главное меню");

				printf("\nВыберите подпункт:>");

				fflush(stdin);

				ch = getchar();

				switch (ch)

				{

				case '1': // Извлечение и печать значения скорости

					printf("Скорость = %d %s", (speed = GetSpeed(data)), ((speed) ? "" : "(стоит)"));

					break;

				case '2': // Извлечение и печать значения уровня

					printf("Уровень = %d", (level = GetLevel(data)));

					break;

				case '3': // Извлечение и печать статуса направления

					printf("Направление -> %s", (direct = GetDirect(data), (direct) ? "Вверх" : "Вниз"));

					break;

				}

			}

			while (ch != '0');

			break;

		case 'E': // Подменю для ввода и упаковки всех данных

		case 'e':

			printf("\n\nПодменю <Упаковка данных>\n");

			// Ввести значение скорости

			printf("Введите скорость:>");

			check = scanf("%d", &speed);

			// Проверить корректность ввода

			if (check != 1 || fgetchar() != 10)

			{

				printf("Ошибка: Некорректное значение скорости\n");

				break;

			}

			// Ввести значение уровня

			printf("Введите уровень:>");

			check = scanf("%d", &level);

			// Проверить корректность ввода

			if (check != 1 || fgetchar() != 10)

			{

				printf("Ошибка: Некорректное значение уровня\n");

				break;

			}

			// Ввести направление

			printf("Введите статус направления [U-вверх|D-вниз]:>");

			ch = getchar();

			// Проверить корректность ввода

			if (ch == 'U' || ch == 'u') direct = true;

			else if (ch == 'D' || ch == 'd') direct = false;

			else

			{
				printf("Ошибка: Некорректный статус направления\n");

				break;

			}

			// Упаковка скорости, уровня, направления в число

			data = Pack(speed, level, direct);

			// Печать результата упаковки

			printf("Упакованные данные: ");

			PrintBinStatus(data);

			break;

		case 'C': // Подменю для изменения компонент данных

		case 'c':

			do {

				// Отобразить подменю

				printf("\n\nПодменю <Изменение данных>:");

				printf("\n1. Изменить значение скорости");

				printf("\n2. Изменить значение уровня");

				printf("\n3. Изменить статус направления");

				printf("\n0. Вернуться в главное меню");

				printf("\nВыберите подпункт:>");

				fflush(stdin);

				ch = getchar();

				switch (ch)

				{

				case '1': // Изменение скорости

				// Ввести значение

					printf("Введите новое значение скорости:>");

					check = scanf("%d", &speed);

					// Проверить корректность ввода

					if (check != 1 || fgetchar() != 10)

					{

						printf("Ошибка: Некорректное значение скорости\n");

						break;

					}

					// Изменить значение в упакованном числе

					data = ChangeSpeed(data, speed);

					break;

				case '2': // Изменение уровня

				// Ввести значение

					printf("Введите новое значение уровня:>");

					check = scanf("%d", &level);

					// Проверить корректность ввода

					if (check != 1 || fgetchar() != 10)

					{

						printf("Ошибка: Некорректное значение уровня\n");

						break;

					}

					// Изменить значение в упакованном числе

					data = ChangeLevel(data, level);

					break;

				case '3': // Изменение направления

				// Ввести значение

					fflush(stdin);

					printf("Введите новый статус направления [U-вверх|D-вниз]:>");

					ch = getchar();

					// Проверить корректность ввода

					if (ch == 'U' || ch == 'u') direct = true;

					else if (ch == 'D' || ch == 'd') direct = false;

					else

					{
						printf("Ошибка: Некорректный статус направления\n");

						break;

					}

					// Изменить значение в упакованном числе

					data = ChangeDirect(data, direct);

					break;

				}

			}

			while (ch != '0');

			break;

		case 'R': // Подменю для генерации случайных данных

		case 'r':

			data = RandomStatus();

			// Сразу переход к печати данных (без break)

		case 'P': // Подменю для печати данных в различных форматах

		case 'p':

			printf("\nБинарный формат: ");

			PrintBinStatus(data);

			printf("\nДесятичный формат: ");

			PrintAllData(data);

			break;

		case 'B': // Подменю для печати данных в различных форматах

		case 'b':

			PrintRadixStatus(data);

			break;

		case '\0': // Пустая команда

			break;

		default:

			printf("Ошибка: Некорректная операция");

			break;

		};

		// Сбросить устройство ввода

		fflush(stdin);

		// Отобразить главное меню

		printf("\n\nГлавное меню:");

		printf("\nR. Заполнить случайными данными");

		printf("\nP. Печатать упакованные данные и число");

		printf("\nG. Извлечь компонент из упакованного числа");

		printf("\nE. Ввести все компоненты и упаковать их в число");

		printf("\nC. Изменить компоненту внутри упакованного числа");

		printf("\nB. Печатать упакованное число в системе счисления");

		printf("\nQ. Выход");

		printf("\nВыберите пункт:>");

		ch = getchar();

	}

	while ((ch != 'Q') && (ch != 'q'));

}