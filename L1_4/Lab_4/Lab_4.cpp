// Lab_4.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <conio.h> // библиотека ввода-вывода
#include <locale.h> // библиотека языковой локализации

#pragma warning(disable: 4996)

/* Главная функция. Реализует ввод, проверку, интерфейс с пользователем.
*/

void main()

{

	// Переменная для хранения целой части при делении нацело
	int remains;
	// Объявление переменных для хранения единиц в системе мер
	int weight, blank, periot, doit, mite, gran;
	// Объявление коэффициентов пересчета в древней системе мер
	// 1 гран = 20 майтов, 1 майт = 4 дойта, 1 дойт = 20 периотов, 1 периот = 24 блэнка 
	const int k_mite_in_gran = 20, k_doit_in_mite = 4, k_periot_in_doit = 20, k_blank_in_periot = 24;
	// Для сообщений на русском языке
	setlocale(LC_ALL, "Russian");
	cprintf("Лаба: Пересчёт меры");
	// Цикл ввода и преобразования веса
	do {
		// Ввод значения веса в единицах СИ
		cprintf("\nВведите значение веса в микрограммах [0..107998]:>");
		cscanf("%d", &weight);
		// Проверка корректности ввода
		if (getch() != 13 || weight < 0 || weight > 107998)
			// Вывод предупреждения
			cprintf("\n - некорректное значение");
		else
		{
			// Вычисление значения веса в древней системе меры с округлением
			remains = int(weight / 0.281245 + 0.55);
			cprintf("\nПолучилось %d ед.", remains);
			// Проверка числа на свойство
			if (remains % 10 == 0)
				cprintf(" - круглое число");
			// Вычисление количества блэнков
			blank = remains % k_blank_in_periot;
			remains = remains / k_blank_in_periot;
			// Вычисление количества периотов
			periot = remains % k_periot_in_doit;
			remains = remains / k_periot_in_doit;
			// Вычисление количества дойтов
			doit = remains % k_doit_in_mite;
			remains = remains / k_doit_in_mite;
			// Вычисление количества майтов
			mite = remains % k_mite_in_gran;
			// Вычисление количества гран
			gran = remains / k_mite_in_gran;
			// Печать результатов
			cprintf("\nВ весе %d мкг содержится", weight);
			if (gran > 0) cprintf(" %d гран%s", gran,
				(gran < 2) ? "" : (gran < 5) ? "а" : "ов");

			if (mite > 0) cprintf(" %d майт%s", mite,
				(mite < 2) ? "" : (mite < 5) ? "а" : "ов");

			if (doit > 0) cprintf(" %d дойт%s", doit,
				(doit < 2) ? "" : (doit < 5) ? "а" : "ов");

			if (periot > 0) cprintf(" %d периот%s", periot,
				(periot < 2) ? "" : (periot < 5) ? "а" : "ов");

			if ((blank > 20) || (blank >= 0) && (blank < 10)) cprintf(" %d блэнк%s", blank,
				(blank < 2) ? "" : (blank < 5) ? "а" : (blank < 21) ? "ов" : (blank == 21) ? "" : "а");

		}
		// Подтверждение ввода нового значения
		cprintf("\nНажмите [enter] для повторения ввода");
	}
	while (getch() == 13);
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
